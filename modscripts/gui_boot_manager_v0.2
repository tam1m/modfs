# MODFS_MODSCRIPT
# SUPPORTS precheck postcheck install language(en,de)
# NAME enable system and branding selection from GUI \(v0.2\)
# DESCRIPTION en
# extent the "restart" page of FRITZ!OS to select system version and branding
# DESCRIPTION de
# Auswahl des zu startenden Systems und des Brandings in der "Neustart"-Seite
# EOH
#
# process parameters
#
language=$1
rootdir=$2
mode=$3
step=$4
[ ${#4} -eq 0 ] && exit 59 # invalid call
#
# execute the requested step
#
rc=0
luafile="$rootdir/usr/www/\$TARGET_BRANDING/system/reboot.lua"
binfile="/usr/bin/guibootmanager"
cmdfile="$rootdir$binfile"
find_line()
{
	local line rc=0
	line="$(grep linux_fs_start $(eval echo $luafile))"
	[ ${#line} -gt 0 ] && rc=0 || rc=1
	return $rc
}
find_envvar()
{
	local line rc=0
	line="$(grep linux_fs_start /proc/sys/urlader/environment)"
	[ ${#line} -gt 0 ] && rc=0 || rc=1
	return $rc
}
install_script()
{
	cat >"$cmdfile" <<"ENDOFSCRIPT"
#! /bin/sh
##############################################################################
#                                                                            #
# GUI Boot Manager extension for AVM's FRITZ!Box routers with "hot flash"    #
# capabilities                                                               #
#                                                                            #
# Copyright (C) 2014-2016 P.HÃ¤mmerlein (http://www.yourfritz.de)             #
#                                                                            #
# This program is free software; you can redistribute it and/or              #
# modify it under the terms of the GNU General Public License                # 
# as published by the Free Software Foundation; either version 2             #
# of the License, or (at your option) any later version.                     #
#                                                                            #
# This program is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of             #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
# GNU General Public License under                                           #
# http://www.gnu.org/licenses/gpl-2.0.html                                   #
# for more details.                                                          #
#                                                                            #
# "FRITZ!Box" is a registered word mark and "AVM" is a registered            #
# word and figurative mark of:                                               #
# AVM Computersysteme Vertriebs GmbH, 10559, Berlin, DE.                     #
#                                                                            #
##############################################################################
#
# pooled variables here for easy changes
#
envpathname="/proc/sys/urlader/environment"
procmtd="/proc/mtd"
mtdprefix="mtd"
mtdblockprefix="mtdblock"
kernelname="kernel"
filesystemname="filesystem"
reservedprefix="reserved-"
fsvarname="linux_fs_start"
brandingvarname="firmware_version"
tffsname="tffs"
wrapper="/wrapper"
rootfsimage="filesystem_core.squashfs"
versionfilename="etc/version"
tmpdirbase="/var/tmp"
shl="/bin/sh"
#
# universal functions
#
# check, if a list contains an item and return its index (based on 1)
# $1 - the item to look for (needle)
# $2 - the haystack
#
index_of_item()
{
	local item i=0
	for item in $2; do
		let i+=1
		[ x"$1" == x"$item" ] && echo $i && return 0
	done
	return 1
}
#
# get the count of words in the specified string
#
count_of_items()
{
	local i=0 item
	for item in $1; do
		let i+=1
	done
	echo $i
}
#
# get branding from environment
#
get_system_branding() { sed -n -e "s/^$brandingvarname\t\(.*\)\$/\1/p" $envpathname; }
#
# get next system index from environment
#
get_system_switch() { sed -n -e "s/^$fsvarname\t\([01]\)/\1/p" $envpathname; }
#
# get MTD number by name
# $1 - requested MTD partition name
#
get_mtd_by_name() { sed -n -e "s|$mtdprefix\([0-9]\{1,2\}\): [0-9a-f]\{8\} [0-9a-f]\{8\} \"$1\"|\1|p" $procmtd; }
#
# get MTD name by number
# $1 - requested MTD partition number
#
get_mtd_by_number() { sed -n -e "s|$mtdprefix$1: [0-9a-f]\{8\} [0-9a-f]\{8\} \"\(.*\)\"|\1|p" $procmtd; }
#
# build MTD partition groups
#
build_partitions()
{
	local g1 g2
	g1=$(get_mtd_by_name $kernelname):$(get_mtd_by_name $filesystemname)
	g2=$(get_mtd_by_name $reservedprefix$kernelname):$(get_mtd_by_name $reservedprefix$filesystemname)
	if [ ${g1:0:1} -lt ${g2:0:1} ]; then
		echo "$g1 $g2"
	else
		echo "$g2 $g1"
	fi
}
#
# check next system against running
#
is_switched()
{
	local nxt kernel filesys kname fname switched=1
	nxt=$(get_system_switch)
	set -- $(build_partitions)
	[ $nxt -gt 0 ] && shift
	kernel=${1%:*}
	filesys=${1#*:}
	kname="$(get_mtd_by_number $kernel)"
	fname="$(get_mtd_by_number $filesys)"
	[ "${kname:0:${#reservedprefix}}" == "$reservedprefix" ] && switched=0
	return $switched
}
#
# get system version
# $1 - system root
#
get_system_version() { $shl "$1$versionfilename" --version; }
#
# get system date
# $1 - system root
#
get_system_date() { $shl "$1$versionfilename" --date; }
#
# switch system selection variable to other value
#
switch_system() { echo $fsvarname $(( ( $(get_system_switch) + 1 ) % 2 )) >$envpathname; }
#
# replace branding, if necessary
#
change_branding() { [ x"$1" != x$(get_system_branding) ] && echo "$brandingvarname $1" >$envpathname; }
#
# switch next boot time selection to specified system, if action is really needed
# $1 - 'running' / 'alternative' to switch to the specified system based on the running version
#
switch_system_to()
{
	local next
	next=$(get_system_switch)
	if is_switched; then
		if [ x"$1" == xrunning ]; then
			switch_system
		fi
	else
		if [ x"$1" == xalternative ]; then
			switch_system
		fi
	fi
	[ ! -z "$2" ] && change_branding $2
	return 0
}
#
# mount alternative system
# $1 - source partition index
# $2 - temporary directory as mount point
#
mount_alternative_system()
{
	local src="$1" tmpdir="$2" rc=0
	mkdir "$tmpdir/altfs" "$tmpdir/rootfs" 2>/dev/null
	mount -t yaffs2 /dev/$mtdblockprefix$src "$tmpdir/altfs"
	mount "$tmpdir/altfs/$rootfsimage" "$tmpdir/rootfs" 2>/dev/null
	rc=$?
	[ $rc -eq 0 ] && echo "$tmpdir/rootfs"
	return $rc
}
#
# dismount the mounted alternative system
# $1 - mount point
#
dismount_alternative_system()
{
	local tmpdir="$1" rc=0
	umount "$tmpdir/rootfs" 2>/dev/null
	rc=$?
	umount "$tmpdir/altfs" 2>/dev/null
	return $rc
}
#
# get possible brandings from firmware directories
# $1 - mount point
#
get_brandings()
{
	local mp="$1" rc=0 path="etc/default.$CONFIG_PRODUKT"
	[ x$mp == x/ ] && path="/$path" || path="$mp/$path"
	find $path -type d -maxdepth 1 | sed -n -e "s|$path[/]*||p" | sed -e "/^\$/d"
}
#
# cleanup any mounted images and remove the temporary directory
#
cleanup()
{
	local device mountpoint filesystem options x y
	grep "$tempdir/rootfs" /proc/mounts |
	while read device mountpoint filesystem options x y; do
		umount "$mountpoint" 2>/dev/null
	done
	grep "$tempdir/altfs" /proc/mounts |
	while read device mountpoint filesystem options x y; do
		umount "$mountpoint" 2>/dev/null
	done
	rm -r "$tempdir" 2>/dev/null
}
#
# prepare a temporary directory and a clean exit routine
#
tempdir="$tmpdirbase/gbtmngr$(date +%s)"
mkdir -p "$tempdir"
trap "cleanup" HUP EXIT
action="$1"
case "$action" in
	html_display)
		switchvalue=$(get_system_switch)
		running_kernel=$(get_mtd_by_name $kernelname)
		alternative_kernel=$(get_mtd_by_name $reservedprefix$kernelname)
		running_filesystem=$(get_mtd_by_name $filesystemname)
		alternative_filesystem=$(get_mtd_by_name $reservedprefix$filesystemname)
		current_branding=$(get_system_branding)
		if [ ${#switchvalue} -eq 0 -o ${#running_kernel} -eq 0 -o ${#alternative_kernel} -eq 0 -o ${#running_filesystem} -eq 0 -o ${#alternative_filesystem} -eq 0 ]; then
			if [ x$Language == xde ]; then
				echo "<h4>Die Umschaltung zwischen zwei alternativen Systemen ist auf dieser FRITZ!Box nicht verf&uuml;gbar.</h4>"
			else
				echo "<h4>Switching between alternative systems is not available on this device.</h4>"
			fi
			rc=1
		else
			mp=$(mount_alternative_system $alternative_filesystem "$tempdir")
			if [ $? -ne 0 ]; then
				alternative_version="unknown"
				alternative_date="unknown"
				alternative_fsdate="unknown"
				alternative_brandings="$current_branding"
			else
				alternative_version=$(get_system_version "$mp/")
				alternative_date=$(get_system_date "$mp/")
				alternative_date_image="$(stat -c %Y "$tempdir/altfs/$rootfsimage")"
				alternative_brandings="$current_branding"
				if [ $? -eq 0 ]; then
					alternative_fsdate="$(date -d @$alternative_date_image +"%d.%m.%y %H:%M")"
					alternative_brandings="$(get_brandings "$tempdir/rootfs")"
				else
					alternative_fsdate="unknown"
				fi
				dismount_alternative_system "$tempdir"
			fi
			mp=$(mount_alternative_system $alternative_filesystem "$tempdir")
			if [ $? -ne 0 ]; then
				alternative_version="unknown"
				alternative_date="unknown"
			else
				alternative_version=$(get_system_version "$mp/")
				alternative_date=$(get_system_date "$mp/")
			fi
			dismount_alternative_system "$tempdir"
			running_version=$(get_system_version /)
			running_date=$(get_system_date /)
			running_fsdate="$(date -d @$(stat -c %Y $wrapper/$rootfsimage) +"%d.%m.%y %H:%M")"
			running_brandings="$(get_brandings "/")"
			if is_switched; then
				running_checked=""
				alternative_checked=" checked=\"checked\""
				show_running=0
			else
				running_checked=" checked=\"checked\""
				alternative_checked=""
				show_running=1
			fi
			[ $(count_of_items "$running_brandings") -gt 1 ] && chg_running_branding=1 || chg_running_branding=0
			[ $(count_of_items "$alternative_brandings") -gt 1 ] && chg_alternative_branding=1 || chg_alternative_branding=0
			if [ x$Language == xde ]; then
				echo "<br /><h3>Folgende Systeme stehen auf dieser FRITZ!Box zur Auswahl bei einem Neustart:</h3><br />"
				echo "<input type=\"radio\" id=\"radioRunning\" name=\"$fsvarname\" value=\"running\"$running_checked />"
				echo "<label for=\"radioRunning\">das aktuell laufende System</label><br /><br />"
				echo "Version $running_version vom $running_date (in MTD$running_kernel/MTD$running_filesystem), das Root-Dateisystem wurde am $running_fsdate zuletzt modifiziert<br /><br />"
				echo "<input type=\"radio\" id=\"radioAlternative\" name=\"$fsvarname\" value=\"alternative\"$alternative_checked />"
				echo "<label for=\"radioAlternative\">das derzeit inaktive System</label><br /><br />"
				echo "Version $alternative_version vom $alternative_date (in MTD$alternative_kernel/MTD$alternative_filesystem), das Root-Dateisystem wurde am $alternative_fsdate zuletzt modifiziert<br /><br />"
				if [ $chg_running_branding -eq 1 ]; then
					echo "<span id=\"running_branding\">"
					echo "<h4>Das oben ausgew&auml;hlte System unterst&uuml;tzt mehrere Firmware-Versionen (Brandings), im Moment ist \"$current_branding\" eingestellt.</h4>"
					echo "<label for=\"idRunningBranding\">Beim n&auml;chsten Start wird folgender Wert gesetzt und bis zur n&auml;chsten &Auml;nderung verwendet: </label>"
					echo "<select id=\"idRunningBranding\" name=\"running_branding\">"
					for branding in $running_brandings; do
						echo -n "<option value=\"$branding\""
						[ $current_branding == $branding ] && echo -n " selected=\"selected\""
						echo ">$branding</option>"
					done
					echo "</select>"
					echo "</span>"
				else
					echo "<span id=\"running_branding\">"
					echo "<h4>Das oben ausgew&auml;hlte System unterst&uuml;tzt nur das Branding \"$current_branding\", dieses ist im Moment auch eingestellt.</h4>"
					echo "<input type=\"hidden\" name=\"running_branding\" value=\"$current_branding\">"
					echo "</span>"
				fi
				if [ $chg_alternative_branding -eq 1 ]; then
					echo "<span id=\"alternative_branding\">"
					echo "<h4>Das oben ausgew&auml;hlte System unterst&uuml;tzt mehrere Firmware-Versionen (Brandings), im Moment ist \"$current_branding\" eingestellt.</h4>"
					echo "<label for=\"idAlternativeBranding\">Beim n&auml;chsten Start wird folgender Wert gesetzt und bis zur n&auml;chsten &Auml;nderung verwendet: </label>"
					echo "<select id=\"idAlternativeBranding\" name=\"alternative_branding\">"
					for branding in $alternative_brandings; do
						echo -n "<option value=\"$branding\""
						[ $current_branding == $branding ] && echo -n " selected=\"selected\""
						echo ">$branding</option>"
					done
					echo "</select>"
					echo "</span>"
				else
					echo "<span id=\"alternative_branding\">"
					echo "<h4>Das oben ausgew&auml;hlte System unterst&uuml;tzt nur das Branding \"$alternative_brandings\", "
					if [ x"$alternative_brandings" == x"$current_branding" ]; then
						echo "dieses ist im Moment auch eingestellt.</h4>"
					else
						echo "im Moment ist jedoch \"$current_branding\" eingestellt.</h4>"
						echo "Bei der Umschaltung des zu verwendenden Systems wird daher auch gleichzeitig das Branding auf \"$alternative_brandings\" ge&auml;ndert."	
					fi
					echo "<input type=\"hidden\" name=\"alternative_branding\" value=\"$alternative_brandings\">"
					echo "</span>"
				fi
			else
				echo "<br /><h3>The following systems are available to be booted during the next start:</h3>"
				echo "<input type=\"radio\" id=\"radioRunning\" name=\"$fsvarname\" value=\"running\"$running_checked />"
				echo "<label for=\"radioRunning\">the running system</label><br /><br />"
				echo "version $running_version, origimally built at $running_date (stored in MTD$running_kernel/MTD$running_filesystem partitions), the root filesystem was last modified on $running_fsdate<br /><br />"
				echo "<input type=\"radio\" id=\"radioAlternative\" name=\"$fsvarname\" value=\"alternative\"$alternative_checked />"
				echo "<label for=\"radioAlternative\">the currently inactive system</label><br /><br />"
				echo "version $alternative_version, originally built at $alternative_date (stored in MTD$alternative_kernel/MTD$alternative_filesystem partitions), the root filesystem was last modified on $alternative_fsdate<br /><br />"
				if [ $chg_running_branding -eq 1 ]; then
					echo "<span id=\"running_branding\">"
					echo "<h4>The system selected above supports multiple firmware versions (aka brandings), currently \"$current_branding\" is in use.</h4>"
					echo "<label for=\"idRunningBranding\">While the device is restarting, this value will be set to the following selection (and will remain there until it is changee again): </label>"
					echo "<select id=\"idRunningBranding\" name=\"running_branding\">"
					for branding in $running_brandings; do
						echo -n "<option value=\"$branding\""
						[ $current_branding == $branding ] && echo -n " selected=\"selected\""
						echo ">$branding</option>"
					done
					echo "</select>"
					echo "</span>"
				else
					echo "<span id=\"running_branding\">"
					echo "<h4>The system selected above supports only one single branding \"$current_branding\", this is already in use.</h4>"
					echo "<input type=\"hidden\" name=\"running_branding\" value=\"$current_branding\">"
					echo "</span>"
				fi
				if [ $chg_alternative_branding -eq 1 ]; then
					echo "<span id=\"alternative_branding\">"
					echo "<h4>The system selected above supports multiple firmware versions (aka brandings), currently \"$current_branding\" is in use.</h4>"
					echo "<label for=\"idAlternativeBranding\">While the device is restarting, this value will be set to the following selection (and will remain there until it is changed again): </label>"
					echo "<select id=\"idAlternativeBranding\" name=\"alternative_branding\">"
					for branding in $alternative_brandings; do
						echo -n "<option value=\"$branding\""
						[ $current_branding == $branding ] && echo -n " selected=\"selected\""
						echo ">$branding</option>"
					done
					echo "</select>"
					echo "</span>"
				else
					echo "<span id=\"alternative_branding\">"
					echo "<h4>The system selected above supports only a single branding \"$alternative_brandings\", "
					if [ x"$alternative_brandings" == x"$current_branding" ]; then
						echo "this is already in use.</h4>"
					else
						echo "currently the value \"$current_branding\" is used.</h4>"
						echo "If you switch to this system now, the branding is forcibly changed to \"$alternative_brandings\"."	
					fi
					echo "<input type=\"hidden\" name=\"alternative_branding\" value=\"$alternative_brandings\">"
					echo "</span>"
				fi
			fi
			echo "<script type=\"text/javascript\">"
			echo "function onBootManagerClick(evt) {"
			echo "var radioButton = jxl.evtTarget(evt);"
			echo "if ( radioButton.id == \"radioRunning\" ) {"
			echo "jxl.show(\"running_branding\");"
			echo "jxl.hide(\"alternative_branding\");"
			echo "} else {"
			echo "jxl.hide(\"running_branding\");"
			echo "jxl.show(\"alternative_branding\");"
			echo "}"
			echo "}"
			echo "function initBootManager() {"
			echo "jxl.addEventHandler(\"radioRunning\",\"click\",onBootManagerClick);"
			echo "jxl.addEventHandler(\"radioAlternative\",\"click\",onBootManagerClick);"
			echo "jxl.display(\"running_branding\", $( [ $show_running -eq 1 ] && printf true || printf false ));"
			echo "jxl.display(\"alternative_branding\", $( [ $show_running -eq 0 ] && printf true || printf false ));"
			echo "}"
			echo "ready.onReady(initBootManager);"
			echo "</script>"
			rc=0
		fi
		;;
	switch_to)
		target="$2"
		branding="$3"
		switch_system_to $target $branding
		rc=$?
		;;
	*)
		rc=127
		;;
esac
exit $rc
ENDOFSCRIPT
	chown root:root "$cmdfile"
	chmod 755 "$cmdfile"
}
case $step in
	precheck)
		find_line
		rc=$?
		if [ $rc -eq 0 ]; then
			case "$language" in
				de)
					echo "Die Modifikation wurde bereit angewendet." 1>&2
					;;
				*)
					echo "The startup file was already modified." 1>&2
					;;
			esac
			rc=1
		else
			find_envvar
			rc=$?
			if [ $rc -ne 0 ]; then
				case "$language" in
					de)
						echo "Dieses GerÃ¤t unterstÃ¼tzt keine 'dual boot'-MÃ¶glichkeit." 1>&2
						;;
					*)
						echo "This device doesn't support booting the system software an alternative partition set." 1>&2
						;;
				esac
				rc=1
			else
				rc=0
			fi
		fi
		;;
	postcheck)
		find_line
		rc=$?
		if [ $rc -eq 1 ]; then
			case "$language" in
				de)
					echo "Die Modifikation war nicht erfolgreich." 1>&2
					;;
				*)
					echo "The startup file seems to be unmodified." 1>&2
					;;
			esac
			rc=1
		fi
		;;
	install)
		for TARGET_BRANDING in $TARGET_BRANDINGS; do
			file="$(eval echo $luafile)"
			sed -i "$file" -e "
/^local savecookie/a\\
if box.post.linux_fs_start then\\
local linux_fs_start = box.post.linux_fs_start\\
local branding = box.post[linux_fs_start..\"_branding\"]\\
os.execute(\"$binfile switch_to \"..linux_fs_start..\" \"..branding)\\
end
/^<form action/a\\
<div id=\"managed_reboot\" class=\"reboot_managed\">\\
<?lua\\
pipe = io.popen(\"$binfile html_display\")\\
line = pipe:read(\"*a\")\\
pipe:close()\\
box.out(line)\\
?>\\
</div>
"
		done
		install_script
		rc=0
		;;
	*)
		rc=59
		;;
esac
exit $rc
